# -*- coding: utf-8 -*-
"""
/***************************************************************************
 aaa
                                 A QGIS plugin
 QGIS3.0 Dynamic Load Test Plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-03-26
        git sha              : $Format:%H$
        copyright            : (C) 2018 by ozo360
        email                : ozo360@example.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, pyqtSignal, QObject
from PyQt5.QtGui import QIcon
from qgis.utils import plugins, loadPlugin, startPlugin
from PyQt5.QtWidgets import QAction, QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *

# class CustomSignal(QObject):
#     mySignal = pyqtSignal(str)

class AAA:
    # myObject = CustomSignal()

    """QGIS Plugin Implementation."""
    def __init__(self, iface):
        self.iface = iface
        self.plugin_instance = None

    def initGui(self):
        pass

    def unload(self):
        pass

    def run(self):
        pass

    # def loadAndExec(self, plugin_name, function_name, function_param):
    #     plugin_list = plugins.keys()
    #     if not plugin_name in plugin_list:
    #         # ロード実行
    #         try:
    #           loadPlugin(plugin_name)
    #           startPlugin(plugin_name)
    #           self.plugin_instance = plugins[plugin_name]
    #           # メソッド実行
    #           eval("self.plugin_instance." + function_name + "('" + function_param + "')")
    #         except:
    #             QMessageBox.critical(self.iface.mainWindow(), 'error', "%s error" % plugin_name)

    # def connectTrigger(self, plugin_name):
    #     self.parent_plugin_instance = plugins[plugin_name]
    #     self.parent_plugin_instance.myObject.mySignal.connect(self.handle_trigger)

    def handle_trigger(self, message):
        QMessageBox.information(self.iface.mainWindow(), 'info', "%s" % message)

    # def emitMessage(self, message):
    #     self.myObject.mySignal.emit(message)